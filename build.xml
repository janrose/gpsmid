<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="GpsMid" 
	default="j2mepolish">
	
	
<property file="build.properties" />
<property file="midlet.properties" />
<property file="${polish.home}/global.properties" />
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

	<target name="set_test_device" unless="gpsmid.test_device">
		<property name="gpsmid.test_device" value="Generic/full"/>
	</target>
	
	<target name="test" 
		description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
		depends="set_test_device"
		>
		<property name="test" value="true" />
		<property name="logging" value="true" />
		<property name="dir.work" value="build/test" />		
	</target>
	
	<target name="debug" 
		description="Call this target first to set debugging"
		>
		<property name="debug" value="true" />
		<property name="logging" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
	
	<target name="logging" 
			description="Call this target first to enable a logging build"
			>
			<property name="logging" value="true" />
		</target>
		
<target name="init">
  	<property name="test" value="false" />
  	<property name="customization" value="" />
	<property name="dir.work" value="build/real/${customization}" />
	<property name="dir.dist" value="dist/${customization}" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			license="GPL"
			name="GpsMid"
			version="0.4.55"
			description=""
			vendorName="Harald Mueller"
			infoUrl="http://gpsmid.sourceforge.net"
			icon="GpsMid.png"
			jarName="GpsMid-${polish.vendor}-${polish.name}-${polish.version}.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2007, 2008 Harald Mueller."
			deleteConfirm="Do you really want to kill me?" 
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${gpsmid.test_device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<or>
				<requirement name="Identifier" value="Generic/full" />
				<requirement name="Identifier" value="Generic/minimal" />
				<requirement name="Identifier" value="Generic/full-nolocation" />
				<requirement name="Identifier" value="Generic/multi" />
				<requirement name="Identifier" value="Generic/minimal-bt" />
				<requirement name="Identifier" value="Generic/no-obex" />
				<requirement name="Identifier" value="Generic/no-xml" />
				<!--
				<requirement name="Identifier" value="Motorola/Motorazr_V3i" />
				<requirement name="Identifier" value="Sony-Ericsson/K750" />
				<requirement name="Identifier" value="Siemens/SL75" />
				<requirement name="Identifier" value="Generic/loc" />
				-->
			</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="false"
			workDir="${dir.work}"
		>     
		   <!-- postcompiler name="floater">
			<parameter name="verbose" value="false" />
	      </postcompiler -->
			<midlet class="de.ueller.midlet.gps.GpsMid" name="GpsMid"/>
			<sources>
				<!-- always include the base folder: -->
				<source dir="src"/>
				<!-- this are the render and data classes without reference
				     to any J2Me Classes ( for usage in J2Se enviroment ) -->
				<source dir="GpsMidGraph"/>
				<!--  include customization specific source folders: -->
				<source dir="srcLocationApi" if="polish.api.locationapi"/>
			</sources>
		    
			<!-- midlets definition -->
			<!-- <midlet class="de.enough.polish.example.MenuMidlet" name="Example" /> -->
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="GpsMid" />

			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources dir="resources" defaultexcludes="yes" excludes="readme.txt">
				<fileset dir="resources" includes="**/*.dat" if="test"/>
				<fileset dir="resources" includes="**/*.d" if="test" />
				<fileset dir="resources" includes="**/*.png"/>
				<fileset dir="resources" includes="**/*.amr"/>
				<fileset dir="resources" includes="**/charMap.txt"/>
				<fileset dir="" includes="**/COPYING"/>

				<!-- you can add resources based on complex criterias: 
				<fileset 
					dir="resources/multimedia" 
					includes="*.wav" 
					if="polish.audio.wav" 
				/>
				<fileset 
					dir="resources/multimedia" 
					includes="*.mid" 
					if="polish.audio.midi and not polish.audio.wav" 
				/>
				-->
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="logging || polish.blackberry" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
				<keep class="de.ueller.midlet.gps.GpsMid" />				
				<keep class="de.ueller.midlet.gps.importexport.ExportSession" />
				<keep class="de.ueller.gps.jsr179.JSR179Input" />
				<keep class="de.ueller.midlet.gps.importexport.FileExportSession" />
				<keep class="de.ueller.midlet.gps.importexport.CommExportSession" />
				<keep class="de.ueller.midlet.gps.importexport.ObexExportSession" />
				<keep class="de.ueller.midlet.gps.importexport.BtObexServer" />
				<keep class="de.ueller.midlet.gps.importexport.CommGpxImportSession" />
				<keep class="de.ueller.midlet.gps.importexport.FileGpxImportSession" />
				<keep class="de.ueller.midlet.gps.importexport.Jsr172GpxParser" />
				<keep class="de.ueller.midlet.gps.importexport.QDGpxParser" />
				<keep class="de.ueller.midlet.gps.importexport.GpxParser" />
				<keep class="de.ueller.midlet.gps.GuiCameraInterface" />
				<keep class="de.ueller.midlet.gps.GuiCamera" />
				<keep class="org.xml.sax.Attributes" />
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="logging" showLogOnError="true" verbose="true" level="debug">
				
				<!--filter pattern="de.ueller.gps.sirf.*" level="debug" / -->
				<!--filter pattern="de.ueller.midlet.gps.Trace" level="debug" / -->
				<!--<filter pattern="de.ueller.midlet.gps.tile.SearchNames" level="debug" />-->
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="true"
			enableMemoryMonitor="true"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="true"
			enableMemoryMonitor="true"
			enableNetworkMonitor="false"
			
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="build-test" />
	<delete dir="dist" />
</target>
	
	<target name="NMEAsim" 
				depends="init"
				description="This is a NMEA over bluetooth simulator" 
				>
			<j2mepolish>		    
				<info
					license="GPL"
					name="NMEAsim"
					version="0.0.01"
					description=""
					vendorName="Harald Mueller"
					infoUrl="http://gpsmid.sourceforge.net"
					icon="GpsMid.png"
					jarName="NMEAsim-${polish.version}.jar" 
					jarUrl="${deploy-url}${polish.jarName}"					
					deleteConfirm="Do you really want to kill me?" 
				/>
				
				<deviceRequirements>
					<requirement name="Identifier" value="Generic/multi" />
				</deviceRequirements>
				
			    <!-- build settings -->
				<!-- 
				 -->
				<build
					fullscreen="menu"
					usePolishGui="false"
					workDir="${dir.work}"
				>     
					<midlet class="de.ueller.tests.NMEAsimMidlet" name="NMEAsim"/>
					<sources>					
						<source dir="test/NMEAsim"/>					
					</sources>
				    
					
					<resources dir="test" defaultexcludes="yes" excludes="readme.txt">
						<fileset dir="test" includes="**/*.dat"/>
						<fileset dir="test" includes="*.txt"/>
					</resources>
					
					<!-- obfuscator settings: do not obfuscate then the test-property is true -->
					<obfuscator name="ProGuard" useDefaultPackage="true" unless="test || polish.blackberry" >					
						<keep class="de.ueller.tests.NMEAsimMidlet" />
					</obfuscator>
					
					<!-- debug settings: only include debug setting when the test-property is true -->
					<debug if="test" showLogOnError="true" verbose="true" level="error">
					</debug>
					
				</build>
				
				<!-- execution of emulator(s) -->
				<emulator
					wait="true"
					securityDomain="maximum"
					enableProfiler="false"
					enableMemoryMonitor="false"
					enableNetworkMonitor="false"					
					>
					<!--if="test and not debug"-->
				</emulator>		
			</j2mepolish>
	</target>
	
	<path id="test.classpath">
		<pathelement location="${basedir}/bin-tests" />
	</path>
	
	<target name="prepare">
		<mkdir dir="bin-tests"/>
	</target>

	<target name="compile-test" depends="prepare">
		<javac srcdir="${basedir}/test/unit-tests;${basedir}/test/unit-tests/j2se_replacements;${basedir}/src/de/ueller/gps/tools;${basedir}/src/de/ueller/gps/nmea;
			${basedir}/src/de/ueller/gps/data; ${basedir}/GpsMidGraph/de/ueller/midlet/gps;
			${basedir}/GpsMidGraph/de/ueller/midlet/gps/data/;${basedir}/GpsMidGraph/de/ueller/gps/tools/" destdir="bin-tests" debug="on" 
			includes="StringTokenizer.java, MoreMath.java, intTree.java,
			MoreMathTests.java,
			IntTreeTests.java, StringTokenizerTests.java, AllTests.java">
			<classpath>
				<path refid="test.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="unit-test" depends="compile-test">
		<junit>
			<classpath refid="test.classpath" />
			<formatter type="plain" usefile="false" />
			<test name="AllTests" />
		</junit>
	</target>

    <target name="min-siemapi-compile" description="compile min-siemapi class files for api jar">
        <mkdir dir="build/min-siemapi"/>
        <javac srcdir="src-lib/min-siemapi" destdir="build/min-siemapi"/>
    </target>
    	
	<target name="min-siemapi" description="create api jar for some Siemens-specific functions" depends="min-siemapi-compile">
        <jar destfile="lib/min-siemapi.jar" basedir="build/min-siemapi"/>
    </target>
	
</project>
